The API for Betabud will be an installable REST interface
TODO: Channels. Improvements.

All APIs will default to "jsonpretty". Optional parameter: format - accepts json, xml
If the request format is application/json - POST/PUT will accept JSON Parameters.
Optional attributes for authentication:
  access_token (cookie or same request format as api call)
  username & password (same request format as api call)
  Session Id (cookie or same request format as api call)

We also introduce the notion of Tags/NotTags.
When creating an item, we encourage Tags to be set (meaning an interest, or relevance),
as well as NotTags to be set (a disinterest or irrelevance).
When you search for items this way, we will search on the term being in Tags but not in NotTags
preventing irrelevant results from appearing.
Only tags are available publically.

GET /user/
Searches for a user
Input parameters
    name
        String - first or last name
    tags
        Array of tags
    ...more soon

Sample request
    GET /user/name=bob&tags[]=motorbikes&tags[]=mechanics

Sample reponse
    {
        "Users": [
            {
                "Username": "bob52",
                "FirstName": "Bob",
                "LastName": "Dobbs",
                "Brief": "Man of the Fnordic realms",
                "AboutMe": "I am a simply charming bloke. ...",
                "Tags": [
                    "sailing",
                    "fnord"
                ],
                "NotTags": [
                    "fishing",
                    "hats"
                ],
                "Views": 42000,
                "Comments": [
                    {
                        "Username": "robertsmyth48",
                        "Comment": "Hello"
                    }
                ]
            }
        ]
    }

    GET /user/[Username]
    Gets the information for a particular user

    Sample request
        GET /user/bob52

    Sample response
        {
            "FirstName": "Bob",
            "LastName": "Dobbs",
            "Brief": "Man of the Fnordic realms",
            "AboutMe": "I am a simply charming bloke. ...",
            "Tags": [
                "sailing",
                "fnord"
            ],
            "NotTags": [
                "fishing",
                "hats"
            ],
            "Views": 42000,
            "Comments": [
                {
                    "Username": "robertsmyth48",
                    "Comment": "Hello"
                }
            ]
        }

GET /user/[Username]/image(.ext)
Gets a user's image - supports jpg, png, gif.
    .ext - optional extension.

Sample request
    GET /user/bob52/image
Sample response
    (png image)

GET /user/[Username]/profile.css
Gets a user's CSS for their profile.

Sample request
    GET /user/bob52/profile.css
Sample response
    (png image)


POST /user/
Creates a new user
Accepts all of the above in GET as parameters, plus:
    Password
        String

Returns: the same as GET.

PUT /user/[UserId]
Alters the account information for a user.
Accepts one or more parameters from GET and can overwrite a user's details.

DELETE /user/[UserId]
Deletes a user
Returns: 204 No Content

GET /video/
List the videos available.
This data is not lazy-loaded but saved in the DB.

Input parameters
    term
        String - Search term, UTF-8
    userid
        Identifier of the user under which to search
    channelid
        identifier of the user's channel under which to search.
    skip
        Int, The amount to skip
    limit
        Int, the amount to limit

Sample request:
    GET /video/?term=motorbike&userid=arb123&channel=bika&skip=10&limit=40

Fields
    
    Title
        String - title of the video, UTF-8 encoded.

    Length
        String in format MM:SS or HH:MM:SS

    Width
        Short int

    Height
        Short int

    Format
        String - format of the video - usually webm, sometimes ogv.

    Bitrate
        Float in kbps

    Size
        Float in kB

    Views
        Int - number of complete views

    PartialViews
        Int - number of partial views

    Bounces
        Int - number of bounces.

    Tags
        Array of tags relevant to this video.

    NotTags
        Array of tags irrelevant to this video.
    
    Feedback:
        Object of appropriate feedback counts.
            Like
                Int
            Dislike
                Int
            ...more later...

    Comments
        Array of objects:
        
            Username:
                The id of the user who made it
            Username:
                The username of the user who made it (at the time at which they made it).
            Comment:
                The comment of the user
            Feedback:
                Like above.

Sample Output (default in jsonpretty, others available, see above):
{
    "Videos" : [
        {
            "VideoId": "h4ck377",
            "Title" : "Sample Video",
            "Length" : "27:22",
            "Width" : 1920,
            "Height" : 1080,
            "Format" :""webm",
            "Bitrate" : 4248,
            "Size" : "42000.600",
            "Views": 4200,
            "PartialViews": 780,
            "Bounces": 80,
            "Feedback": {
                "Like": 42,
                "Dislike": 1
            },
            "Tags": [
                "epic",
                "nightwish",
                "sample"
            ],
            "NotTags": [
                "wishingwell",
                "thunder",
                "trex"
            ],
            "Comments" : {
                "Username" : "420",
                "Comment" : "Epic!",
                "Feedback": {
                    "Like": 1,
                    "Dislike": 1
                }
            }
        }
    ],
}

POST /video
Upload a video.
Parameters:
        File
            Encoding: x-multipart/form-data
            does MIME type detection, magic number detection and file extension detection.
        Title
            String
        Tags
            Array of strings
        NotTags
            Array of strings

Sample request for POST fields:
    {
        "Title": "Ode to Bob",
        "Tags": [
            "bob",
            "dobbs"
        ],
        "NotTags": [
            "boba",
            "cow",
            "meow"
        ]
    }

Uploads the file to the correct destination.
Returns that of GET /video

PUT /video/[VideoId]
Change a video.
Parameters:
    VideoId
        String
    Any of POST /video
Returns:
    That of GET /video

DELETE /video/[VideoId]
Deletes a video
Parameters:
    VideoId
        String
Returns:
204 No Content
